# 2017-11-29 12:53:23.972873
# SECTION: 06_loops
# TEST: 19
# INFO: substr in loop
# REQUIRED EXTENSIONS: 
# ACTIVATED EXTENSIONS: 
# STATE: FAIL
# 
# COMPILER STDERR:
# 
# INTERPRETER STDERR:
# Executing instruction: ILABEL at line: 2 with following arguments:
# Executing instruction: ICREATEFRAME at line: 3 with following arguments:
# Executing instruction: IPUSHFRAME at line: 4 with following arguments:
# Executing instruction: IDEFVAR at line: 5 with following arguments:
# Dest: LF@a
# Executing instruction: IMOVE at line: 6 with following arguments:
# Arg1: Const@=(string)
# Dest: LF@a()
# Executing instruction: IDEFVAR at line: 7 with following arguments:
# Dest: LF@a_len
# Executing instruction: IMOVE at line: 8 with following arguments:
# Arg1: Const@=0(int)
# Dest: LF@a_len()
# Executing instruction: IDEFVAR at line: 9 with following arguments:
# Dest: LF@res
# Executing instruction: IMOVE at line: 10 with following arguments:
# Arg1: Const@=(string)
# Dest: LF@res()
# Executing instruction: IPUSHS at line: 11 with following arguments:
# Arg1: Const@=hgdfh_DFGkf5665678(string)
# Dest: Stack@()
# Executing instruction: IPOPS at line: 12 with following arguments:
# Arg1: Stack@=hgdfh_DFGkf5665678(string)
# Dest: LF@a=(string)
# Executing instruction: ICLEARS at line: 13 with following arguments:
# Executing instruction: IPUSHS at line: 14 with following arguments:
# Arg1: LF@a=hgdfh_DFGkf5665678(string)
# Dest: Stack@()
# Executing instruction: ICREATEFRAME at line: 15 with following arguments:
# Executing instruction: IPUSHFRAME at line: 16 with following arguments:
# Executing instruction: IDEFVAR at line: 17 with following arguments:
# Dest: LF@&result
# Executing instruction: IDEFVAR at line: 18 with following arguments:
# Dest: LF@&in
# Executing instruction: IPOPS at line: 19 with following arguments:
# Arg1: Stack@=hgdfh_DFGkf5665678(string)
# Dest: LF@&in()
# Executing instruction: ISTRLEN at line: 20 with following arguments:
# Arg1: LF@&in=hgdfh_DFGkf5665678(string)
# Dest: LF@&result()
# Executing instruction: IPUSHS at line: 21 with following arguments:
# Arg1: LF@&result=18(int)
# Dest: Stack@()
# Executing instruction: IPOPFRAME at line: 22 with following arguments:
# Executing instruction: IDEFVAR at line: 23 with following arguments:
# Dest: LF@&&function_return_0
# Executing instruction: IPOPS at line: 24 with following arguments:
# Arg1: Stack@=18(int)
# Dest: LF@&&function_return_0()
# Executing instruction: IPUSHS at line: 25 with following arguments:
# Arg1: LF@&&function_return_0=18(int)
# Dest: Stack@()
# Executing instruction: IPOPS at line: 26 with following arguments:
# Arg1: Stack@=18(int)
# Dest: LF@a_len=0(int)
# Executing instruction: ICLEARS at line: 27 with following arguments:
# Executing instruction: IDEFVAR at line: 28 with following arguments:
# Dest: LF@i
# Executing instruction: IMOVE at line: 29 with following arguments:
# Arg1: Const@=0(int)
# Dest: LF@i()
# Executing instruction: IPUSHS at line: 30 with following arguments:
# Arg1: Const@=1(int)
# Dest: Stack@()
# Executing instruction: IPOPS at line: 31 with following arguments:
# Arg1: Stack@=1(int)
# Dest: LF@i=0(int)
# Executing instruction: ICLEARS at line: 32 with following arguments:
# Executing instruction: ILABEL at line: 33 with following arguments:
# Executing instruction: IPUSHS at line: 34 with following arguments:
# Arg1: LF@i=1(int)
# Dest: Stack@()
# Executing instruction: IPUSHS at line: 35 with following arguments:
# Arg1: LF@a_len=18(int)
# Dest: Stack@()
# Executing instruction: IGTS at line: 36 with following arguments:
# Arg1: Stack@=1(int)
# Arg2: Stack@=18(int)
# Dest: Stack@()
# Executing instruction: INOTS at line: 37 with following arguments:
# Arg1: Stack@=false(bool)
# Dest: Stack@()
# Executing instruction: IPUSHS at line: 38 with following arguments:
# Arg1: Const@=true(bool)
# Dest: Stack@()
# Executing instruction: IJUMPIFNEQS at line: 39 with following arguments:
# Arg1: Stack@=true(bool)
# Arg2: Stack@=true(bool)
# Executing instruction: IPUSHS at line: 40 with following arguments:
# Arg1: LF@a=hgdfh_DFGkf5665678(string)
# Dest: Stack@()
# Executing instruction: IPUSHS at line: 41 with following arguments:
# Arg1: Const@=1(int)
# Dest: Stack@()
# Executing instruction: IPUSHS at line: 42 with following arguments:
# Arg1: LF@i=1(int)
# Dest: Stack@()
# Executing instruction: ICREATEFRAME at line: 43 with following arguments:
# Executing instruction: IPUSHFRAME at line: 44 with following arguments:
# Executing instruction: IDEFVAR at line: 45 with following arguments:
# Dest: LF@&result
# Executing instruction: IMOVE at line: 46 with following arguments:
# Arg1: Const@=(string)
# Dest: LF@&result()
# Executing instruction: IDEFVAR at line: 47 with following arguments:
# Dest: LF@out_len
# Executing instruction: IPOPS at line: 48 with following arguments:
# Arg1: Stack@=1(int)
# Dest: LF@out_len()
# Executing instruction: IDEFVAR at line: 49 with following arguments:
# Dest: LF@index
# Executing instruction: IPOPS at line: 50 with following arguments:
# Arg1: Stack@=1(int)
# Dest: LF@index()
# Executing instruction: IDEFVAR at line: 51 with following arguments:
# Dest: LF@input
# Executing instruction: IPOPS at line: 52 with following arguments:
# Arg1: Stack@=hgdfh_DFGkf5665678(string)
# Dest: LF@input()
# Executing instruction: IDEFVAR at line: 53 with following arguments:
# Dest: LF@str_len
# Executing instruction: ISTRLEN at line: 54 with following arguments:
# Arg1: LF@input=hgdfh_DFGkf5665678(string)
# Dest: LF@str_len()
# Executing instruction: IPUSHS at line: 55 with following arguments:
# Arg1: LF@str_len=18(int)
# Dest: Stack@()
# Executing instruction: IPUSHS at line: 56 with following arguments:
# Arg1: Const@=0(int)
# Dest: Stack@()
# Executing instruction: IEQS at line: 57 with following arguments:
# Arg1: Stack@=18(int)
# Arg2: Stack@=0(int)
# Dest: Stack@()
# Executing instruction: IPUSHS at line: 58 with following arguments:
# Arg1: LF@index=1(int)
# Dest: Stack@()
# Executing instruction: IPUSHS at line: 59 with following arguments:
# Arg1: Const@=0(int)
# Dest: Stack@()
# Executing instruction: IGTS at line: 60 with following arguments:
# Arg1: Stack@=1(int)
# Arg2: Stack@=0(int)
# Dest: Stack@()
# Executing instruction: INOTS at line: 61 with following arguments:
# Arg1: Stack@=true(bool)
# Dest: Stack@()
# Executing instruction: IORS at line: 62 with following arguments:
# Arg1: Stack@=false(bool)
# Arg2: Stack@=false(bool)
# Dest: Stack@()
# Executing instruction: IPUSHS at line: 63 with following arguments:
# Arg1: Const@=true(bool)
# Dest: Stack@()
# Executing instruction: IJUMPIFEQS at line: 64 with following arguments:
# Arg1: Stack@=false(bool)
# Arg2: Stack@=true(bool)
# Executing instruction: IPUSHS at line: 65 with following arguments:
# Arg1: LF@out_len=1(int)
# Dest: Stack@()
# Executing instruction: IPUSHS at line: 66 with following arguments:
# Arg1: Const@=0(int)
# Dest: Stack@()
# Executing instruction: ILSS at line: 67 with following arguments:
# Arg1: Stack@=1(int)
# Arg2: Stack@=0(int)
# Dest: Stack@()
# Executing instruction: IPUSHS at line: 68 with following arguments:
# Arg1: LF@out_len=1(int)
# Dest: Stack@()
# Executing instruction: IPUSHS at line: 69 with following arguments:
# Arg1: LF@str_len=18(int)
# Dest: Stack@()
# Executing instruction: IPUSHS at line: 70 with following arguments:
# Arg1: LF@index=1(int)
# Dest: Stack@()
# Executing instruction: ISUBS at line: 71 with following arguments:
# Arg1: Stack@=18(int)
# Arg2: Stack@=1(int)
# Dest: Stack@()
# Executing instruction: IGTS at line: 72 with following arguments:
# Arg1: Stack@=1(int)
# Arg2: Stack@=17(int)
# Dest: Stack@()
# Executing instruction: IORS at line: 73 with following arguments:
# Arg1: Stack@=false(bool)
# Arg2: Stack@=false(bool)
# Dest: Stack@()
# Executing instruction: IPUSHS at line: 74 with following arguments:
# Arg1: Const@=false(bool)
# Dest: Stack@()
# Executing instruction: IJUMPIFEQS at line: 75 with following arguments:
# Arg1: Stack@=false(bool)
# Arg2: Stack@=false(bool)
# Executing instruction: ILABEL at line: 82 with following arguments:
# Executing instruction: ISUB at line: 83 with following arguments:
# Arg1: LF@index=1(int)
# Arg2: Const@=1(int)
# Dest: LF@index=1(int)
# Executing instruction: IDEFVAR at line: 84 with following arguments:
# Dest: LF@end_index
# Executing instruction: IPUSHS at line: 85 with following arguments:
# Arg1: LF@index=0(int)
# Dest: Stack@()
# Executing instruction: IPUSHS at line: 86 with following arguments:
# Arg1: LF@out_len=1(int)
# Dest: Stack@()
# Executing instruction: IADDS at line: 87 with following arguments:
# Arg1: Stack@=0(int)
# Arg2: Stack@=1(int)
# Dest: Stack@()
# Executing instruction: IPOPS at line: 88 with following arguments:
# Arg1: Stack@=1(int)
# Dest: LF@end_index()
# Executing instruction: IDEFVAR at line: 89 with following arguments:
# Dest: LF@state_loop
# Executing instruction: IDEFVAR at line: 90 with following arguments:
# Dest: LF@tmp_char
# Executing instruction: ILABEL at line: 91 with following arguments:
# Executing instruction: ILS at line: 92 with following arguments:
# Arg1: LF@index=0(int)
# Arg2: LF@end_index=1(int)
# Dest: LF@state_loop()
# Executing instruction: IJUMPIFEQ at line: 93 with following arguments:
# Arg1: LF@state_loop=true(bool)
# Arg2: Const@=false(bool)
# Executing instruction: IGETCHAR at line: 94 with following arguments:
# Arg1: LF@input=hgdfh_DFGkf5665678(string)
# Arg2: LF@index=0(int)
# Dest: LF@tmp_char()
# Executing instruction: ICONCAT at line: 95 with following arguments:
# Arg1: LF@&result=(string)
# Arg2: LF@tmp_char=h(string)
# Dest: LF@&result=(string)
# Executing instruction: IADD at line: 96 with following arguments:
# Arg1: LF@index=0(int)
# Arg2: Const@=1(int)
# Dest: LF@index=0(int)
# Executing instruction: IJUMP at line: 97 with following arguments:
# Executing instruction: ILABEL at line: 91 with following arguments:
# Executing instruction: ILS at line: 92 with following arguments:
# Arg1: LF@index=1(int)
# Arg2: LF@end_index=1(int)
# Dest: LF@state_loop=true(bool)
# Executing instruction: IJUMPIFEQ at line: 93 with following arguments:
# Arg1: LF@state_loop=false(bool)
# Arg2: Const@=false(bool)
# Executing instruction: ILABEL at line: 98 with following arguments:
# Executing instruction: ILABEL at line: 99 with following arguments:
# Executing instruction: IPUSHS at line: 100 with following arguments:
# Arg1: LF@&result=h(string)
# Dest: Stack@()
# Executing instruction: IPOPFRAME at line: 101 with following arguments:
# Executing instruction: IDEFVAR at line: 102 with following arguments:
# Dest: LF@&&function_return_4
# Executing instruction: IPOPS at line: 103 with following arguments:
# Arg1: Stack@=h(string)
# Dest: LF@&&function_return_4()
# Executing instruction: IPUSHS at line: 104 with following arguments:
# Arg1: LF@&&function_return_4=h(string)
# Dest: Stack@()
# Executing instruction: IPOPS at line: 105 with following arguments:
# Arg1: Stack@=h(string)
# Dest: LF@res=(string)
# Executing instruction: ICLEARS at line: 106 with following arguments:
# Executing instruction: IPUSHS at line: 107 with following arguments:
# Arg1: LF@res=h(string)
# Dest: Stack@()
# Executing instruction: ICREATEFRAME at line: 108 with following arguments:
# Executing instruction: IDEFVAR at line: 109 with following arguments:
# Dest: TF@expr
# Executing instruction: IPOPS at line: 110 with following arguments:
# Arg1: Stack@=h(string)
# Dest: TF@expr()
# Executing instruction: IWRITE at line: 111 with following arguments:
# Arg1: TF@expr=h(string)
# Executing instruction: ICLEARS at line: 112 with following arguments:
# Executing instruction: IPUSHS at line: 113 with following arguments:
# Arg1: LF@a=hgdfh_DFGkf5665678(string)
# Dest: Stack@()
# Executing instruction: IPUSHS at line: 114 with following arguments:
# Arg1: LF@i=1(int)
# Dest: Stack@()
# Executing instruction: IPUSHS at line: 115 with following arguments:
# Arg1: LF@a_len=18(int)
# Dest: Stack@()
# Executing instruction: ICREATEFRAME at line: 116 with following arguments:
# Executing instruction: IPUSHFRAME at line: 117 with following arguments:
# Executing instruction: IDEFVAR at line: 118 with following arguments:
# Dest: LF@&result
# Executing instruction: IMOVE at line: 119 with following arguments:
# Arg1: Const@=(string)
# Dest: LF@&result()
# Executing instruction: IDEFVAR at line: 120 with following arguments:
# Dest: LF@out_len
# Executing instruction: IPOPS at line: 121 with following arguments:
# Arg1: Stack@=18(int)
# Dest: LF@out_len()
# Executing instruction: IDEFVAR at line: 122 with following arguments:
# Dest: LF@index
# Executing instruction: IPOPS at line: 123 with following arguments:
# Arg1: Stack@=1(int)
# Dest: LF@index()
# Executing instruction: IDEFVAR at line: 124 with following arguments:
# Dest: LF@input
# Executing instruction: IPOPS at line: 125 with following arguments:
# Arg1: Stack@=hgdfh_DFGkf5665678(string)
# Dest: LF@input()
# Executing instruction: IDEFVAR at line: 126 with following arguments:
# Dest: LF@str_len
# Executing instruction: ISTRLEN at line: 127 with following arguments:
# Arg1: LF@input=hgdfh_DFGkf5665678(string)
# Dest: LF@str_len()
# Executing instruction: IPUSHS at line: 128 with following arguments:
# Arg1: LF@str_len=18(int)
# Dest: Stack@()
# Executing instruction: IPUSHS at line: 129 with following arguments:
# Arg1: Const@=0(int)
# Dest: Stack@()
# Executing instruction: IEQS at line: 130 with following arguments:
# Arg1: Stack@=18(int)
# Arg2: Stack@=0(int)
# Dest: Stack@()
# Executing instruction: IPUSHS at line: 131 with following arguments:
# Arg1: LF@index=1(int)
# Dest: Stack@()
# Executing instruction: IPUSHS at line: 132 with following arguments:
# Arg1: Const@=0(int)
# Dest: Stack@()
# Executing instruction: IGTS at line: 133 with following arguments:
# Arg1: Stack@=1(int)
# Arg2: Stack@=0(int)
# Dest: Stack@()
# Executing instruction: INOTS at line: 134 with following arguments:
# Arg1: Stack@=true(bool)
# Dest: Stack@()
# Executing instruction: IORS at line: 135 with following arguments:
# Arg1: Stack@=false(bool)
# Arg2: Stack@=false(bool)
# Dest: Stack@()
# Executing instruction: IPUSHS at line: 136 with following arguments:
# Arg1: Const@=true(bool)
# Dest: Stack@()
# Executing instruction: IJUMPIFEQS at line: 137 with following arguments:
# Arg1: Stack@=false(bool)
# Arg2: Stack@=true(bool)
# Executing instruction: IPUSHS at line: 138 with following arguments:
# Arg1: LF@out_len=18(int)
# Dest: Stack@()
# Executing instruction: IPUSHS at line: 139 with following arguments:
# Arg1: Const@=0(int)
# Dest: Stack@()
# Executing instruction: ILSS at line: 140 with following arguments:
# Arg1: Stack@=18(int)
# Arg2: Stack@=0(int)
# Dest: Stack@()
# Executing instruction: IPUSHS at line: 141 with following arguments:
# Arg1: LF@out_len=18(int)
# Dest: Stack@()
# Executing instruction: IPUSHS at line: 142 with following arguments:
# Arg1: LF@str_len=18(int)
# Dest: Stack@()
# Executing instruction: IPUSHS at line: 143 with following arguments:
# Arg1: LF@index=1(int)
# Dest: Stack@()
# Executing instruction: ISUBS at line: 144 with following arguments:
# Arg1: Stack@=18(int)
# Arg2: Stack@=1(int)
# Dest: Stack@()
# Executing instruction: IGTS at line: 145 with following arguments:
# Arg1: Stack@=18(int)
# Arg2: Stack@=17(int)
# Dest: Stack@()
# Executing instruction: IORS at line: 146 with following arguments:
# Arg1: Stack@=false(bool)
# Arg2: Stack@=true(bool)
# Dest: Stack@()
# Executing instruction: IPUSHS at line: 147 with following arguments:
# Arg1: Const@=false(bool)
# Dest: Stack@()
# Executing instruction: IJUMPIFEQS at line: 148 with following arguments:
# Arg1: Stack@=true(bool)
# Arg2: Stack@=false(bool)
# Executing instruction: IPUSHS at line: 149 with following arguments:
# Arg1: LF@str_len=18(int)
# Dest: Stack@()
# Executing instruction: IPUSHS at line: 150 with following arguments:
# Arg1: LF@index=1(int)
# Dest: Stack@()
# Executing instruction: ISUBS at line: 151 with following arguments:
# Arg1: Stack@=18(int)
# Arg2: Stack@=1(int)
# Dest: Stack@()
# Executing instruction: IPUSHS at line: 152 with following arguments:
# Arg1: Const@=1(int)
# Dest: Stack@()
# Executing instruction: IADDS at line: 153 with following arguments:
# Arg1: Stack@=17(int)
# Arg2: Stack@=1(int)
# Dest: Stack@()
# Executing instruction: IPOPS at line: 154 with following arguments:
# Arg1: Stack@=18(int)
# Dest: LF@out_len=18(int)
# Executing instruction: ILABEL at line: 155 with following arguments:
# Executing instruction: ISUB at line: 156 with following arguments:
# Arg1: LF@index=1(int)
# Arg2: Const@=1(int)
# Dest: LF@index=1(int)
# Executing instruction: IDEFVAR at line: 157 with following arguments:
# Dest: LF@end_index
# Executing instruction: IPUSHS at line: 158 with following arguments:
# Arg1: LF@index=0(int)
# Dest: Stack@()
# Executing instruction: IPUSHS at line: 159 with following arguments:
# Arg1: LF@out_len=18(int)
# Dest: Stack@()
# Executing instruction: IADDS at line: 160 with following arguments:
# Arg1: Stack@=0(int)
# Arg2: Stack@=18(int)
# Dest: Stack@()
# Executing instruction: IPOPS at line: 161 with following arguments:
# Arg1: Stack@=18(int)
# Dest: LF@end_index()
# Executing instruction: IDEFVAR at line: 162 with following arguments:
# Dest: LF@state_loop
# Executing instruction: IDEFVAR at line: 163 with following arguments:
# Dest: LF@tmp_char
# Executing instruction: ILABEL at line: 164 with following arguments:
# Executing instruction: ILS at line: 165 with following arguments:
# Arg1: LF@index=0(int)
# Arg2: LF@end_index=18(int)
# Dest: LF@state_loop()
# Executing instruction: IJUMPIFEQ at line: 166 with following arguments:
# Arg1: LF@state_loop=true(bool)
# Arg2: Const@=false(bool)
# Executing instruction: IGETCHAR at line: 167 with following arguments:
# Arg1: LF@input=hgdfh_DFGkf5665678(string)
# Arg2: LF@index=0(int)
# Dest: LF@tmp_char()
# Executing instruction: ICONCAT at line: 168 with following arguments:
# Arg1: LF@&result=(string)
# Arg2: LF@tmp_char=h(string)
# Dest: LF@&result=(string)
# Executing instruction: IADD at line: 169 with following arguments:
# Arg1: LF@index=0(int)
# Arg2: Const@=1(int)
# Dest: LF@index=0(int)
# Executing instruction: IJUMP at line: 170 with following arguments:
# Executing instruction: ILABEL at line: 164 with following arguments:
# Executing instruction: ILS at line: 165 with following arguments:
# Arg1: LF@index=1(int)
# Arg2: LF@end_index=18(int)
# Dest: LF@state_loop=true(bool)
# Executing instruction: IJUMPIFEQ at line: 166 with following arguments:
# Arg1: LF@state_loop=true(bool)
# Arg2: Const@=false(bool)
# Executing instruction: IGETCHAR at line: 167 with following arguments:
# Arg1: LF@input=hgdfh_DFGkf5665678(string)
# Arg2: LF@index=1(int)
# Dest: LF@tmp_char=h(string)
# Executing instruction: ICONCAT at line: 168 with following arguments:
# Arg1: LF@&result=h(string)
# Arg2: LF@tmp_char=g(string)
# Dest: LF@&result=h(string)
# Executing instruction: IADD at line: 169 with following arguments:
# Arg1: LF@index=1(int)
# Arg2: Const@=1(int)
# Dest: LF@index=1(int)
# Executing instruction: IJUMP at line: 170 with following arguments:
# Executing instruction: ILABEL at line: 164 with following arguments:
# Executing instruction: ILS at line: 165 with following arguments:
# Arg1: LF@index=2(int)
# Arg2: LF@end_index=18(int)
# Dest: LF@state_loop=true(bool)
# Executing instruction: IJUMPIFEQ at line: 166 with following arguments:
# Arg1: LF@state_loop=true(bool)
# Arg2: Const@=false(bool)
# Executing instruction: IGETCHAR at line: 167 with following arguments:
# Arg1: LF@input=hgdfh_DFGkf5665678(string)
# Arg2: LF@index=2(int)
# Dest: LF@tmp_char=g(string)
# Executing instruction: ICONCAT at line: 168 with following arguments:
# Arg1: LF@&result=hg(string)
# Arg2: LF@tmp_char=d(string)
# Dest: LF@&result=hg(string)
# Executing instruction: IADD at line: 169 with following arguments:
# Arg1: LF@index=2(int)
# Arg2: Const@=1(int)
# Dest: LF@index=2(int)
# Executing instruction: IJUMP at line: 170 with following arguments:
# Executing instruction: ILABEL at line: 164 with following arguments:
# Executing instruction: ILS at line: 165 with following arguments:
# Arg1: LF@index=3(int)
# Arg2: LF@end_index=18(int)
# Dest: LF@state_loop=true(bool)
# Executing instruction: IJUMPIFEQ at line: 166 with following arguments:
# Arg1: LF@state_loop=true(bool)
# Arg2: Const@=false(bool)
# Executing instruction: IGETCHAR at line: 167 with following arguments:
# Arg1: LF@input=hgdfh_DFGkf5665678(string)
# Arg2: LF@index=3(int)
# Dest: LF@tmp_char=d(string)
# Executing instruction: ICONCAT at line: 168 with following arguments:
# Arg1: LF@&result=hgd(string)
# Arg2: LF@tmp_char=f(string)
# Dest: LF@&result=hgd(string)
# Executing instruction: IADD at line: 169 with following arguments:
# Arg1: LF@index=3(int)
# Arg2: Const@=1(int)
# Dest: LF@index=3(int)
# Executing instruction: IJUMP at line: 170 with following arguments:
# Executing instruction: ILABEL at line: 164 with following arguments:
# Executing instruction: ILS at line: 165 with following arguments:
# Arg1: LF@index=4(int)
# Arg2: LF@end_index=18(int)
# Dest: LF@state_loop=true(bool)
# Executing instruction: IJUMPIFEQ at line: 166 with following arguments:
# Arg1: LF@state_loop=true(bool)
# Arg2: Const@=false(bool)
# Executing instruction: IGETCHAR at line: 167 with following arguments:
# Arg1: LF@input=hgdfh_DFGkf5665678(string)
# Arg2: LF@index=4(int)
# Dest: LF@tmp_char=f(string)
# Executing instruction: ICONCAT at line: 168 with following arguments:
# Arg1: LF@&result=hgdf(string)
# Arg2: LF@tmp_char=h(string)
# Dest: LF@&result=hgdf(string)
# Executing instruction: IADD at line: 169 with following arguments:
# Arg1: LF@index=4(int)
# Arg2: Const@=1(int)
# Dest: LF@index=4(int)
# Executing instruction: IJUMP at line: 170 with following arguments:
# Executing instruction: ILABEL at line: 164 with following arguments:
# Executing instruction: ILS at line: 165 with following arguments:
# Arg1: LF@index=5(int)
# Arg2: LF@end_index=18(int)
# Dest: LF@state_loop=true(bool)
# Executing instruction: IJUMPIFEQ at line: 166 with following arguments:
# Arg1: LF@state_loop=true(bool)
# Arg2: Const@=false(bool)
# Executing instruction: IGETCHAR at line: 167 with following arguments:
# Arg1: LF@input=hgdfh_DFGkf5665678(string)
# Arg2: LF@index=5(int)
# Dest: LF@tmp_char=h(string)
# Executing instruction: ICONCAT at line: 168 with following arguments:
# Arg1: LF@&result=hgdfh(string)
# Arg2: LF@tmp_char=_(string)
# Dest: LF@&result=hgdfh(string)
# Executing instruction: IADD at line: 169 with following arguments:
# Arg1: LF@index=5(int)
# Arg2: Const@=1(int)
# Dest: LF@index=5(int)
# Executing instruction: IJUMP at line: 170 with following arguments:
# Executing instruction: ILABEL at line: 164 with following arguments:
# Executing instruction: ILS at line: 165 with following arguments:
# Arg1: LF@index=6(int)
# Arg2: LF@end_index=18(int)
# Dest: LF@state_loop=true(bool)
# Executing instruction: IJUMPIFEQ at line: 166 with following arguments:
# Arg1: LF@state_loop=true(bool)
# Arg2: Const@=false(bool)
# Executing instruction: IGETCHAR at line: 167 with following arguments:
# Arg1: LF@input=hgdfh_DFGkf5665678(string)
# Arg2: LF@index=6(int)
# Dest: LF@tmp_char=_(string)
# Executing instruction: ICONCAT at line: 168 with following arguments:
# Arg1: LF@&result=hgdfh_(string)
# Arg2: LF@tmp_char=D(string)
# Dest: LF@&result=hgdfh_(string)
# Executing instruction: IADD at line: 169 with following arguments:
# Arg1: LF@index=6(int)
# Arg2: Const@=1(int)
# Dest: LF@index=6(int)
# Executing instruction: IJUMP at line: 170 with following arguments:
# Executing instruction: ILABEL at line: 164 with following arguments:
# Executing instruction: ILS at line: 165 with following arguments:
# Arg1: LF@index=7(int)
# Arg2: LF@end_index=18(int)
# Dest: LF@state_loop=true(bool)
# Executing instruction: IJUMPIFEQ at line: 166 with following arguments:
# Arg1: LF@state_loop=true(bool)
# Arg2: Const@=false(bool)
# Executing instruction: IGETCHAR at line: 167 with following arguments:
# Arg1: LF@input=hgdfh_DFGkf5665678(string)
# Arg2: LF@index=7(int)
# Dest: LF@tmp_char=D(string)
# Executing instruction: ICONCAT at line: 168 with following arguments:
# Arg1: LF@&result=hgdfh_D(string)
# Arg2: LF@tmp_char=F(string)
# Dest: LF@&result=hgdfh_D(string)
# Executing instruction: IADD at line: 169 with following arguments:
# Arg1: LF@index=7(int)
# Arg2: Const@=1(int)
# Dest: LF@index=7(int)
# Executing instruction: IJUMP at line: 170 with following arguments:
# Executing instruction: ILABEL at line: 164 with following arguments:
# Executing instruction: ILS at line: 165 with following arguments:
# Arg1: LF@index=8(int)
# Arg2: LF@end_index=18(int)
# Dest: LF@state_loop=true(bool)
# Executing instruction: IJUMPIFEQ at line: 166 with following arguments:
# Arg1: LF@state_loop=true(bool)
# Arg2: Const@=false(bool)
# Executing instruction: IGETCHAR at line: 167 with following arguments:
# Arg1: LF@input=hgdfh_DFGkf5665678(string)
# Arg2: LF@index=8(int)
# Dest: LF@tmp_char=F(string)
# Executing instruction: ICONCAT at line: 168 with following arguments:
# Arg1: LF@&result=hgdfh_DF(string)
# Arg2: LF@tmp_char=G(string)
# Dest: LF@&result=hgdfh_DF(string)
# Executing instruction: IADD at line: 169 with following arguments:
# Arg1: LF@index=8(int)
# Arg2: Const@=1(int)
# Dest: LF@index=8(int)
# Executing instruction: IJUMP at line: 170 with following arguments:
# Executing instruction: ILABEL at line: 164 with following arguments:
# Executing instruction: ILS at line: 165 with following arguments:
# Arg1: LF@index=9(int)
# Arg2: LF@end_index=18(int)
# Dest: LF@state_loop=true(bool)
# Executing instruction: IJUMPIFEQ at line: 166 with following arguments:
# Arg1: LF@state_loop=true(bool)
# Arg2: Const@=false(bool)
# Executing instruction: IGETCHAR at line: 167 with following arguments:
# Arg1: LF@input=hgdfh_DFGkf5665678(string)
# Arg2: LF@index=9(int)
# Dest: LF@tmp_char=G(string)
# Executing instruction: ICONCAT at line: 168 with following arguments:
# Arg1: LF@&result=hgdfh_DFG(string)
# Arg2: LF@tmp_char=k(string)
# Dest: LF@&result=hgdfh_DFG(string)
# Executing instruction: IADD at line: 169 with following arguments:
# Arg1: LF@index=9(int)
# Arg2: Const@=1(int)
# Dest: LF@index=9(int)
# Executing instruction: IJUMP at line: 170 with following arguments:
# Executing instruction: ILABEL at line: 164 with following arguments:
# Executing instruction: ILS at line: 165 with following arguments:
# Arg1: LF@index=10(int)
# Arg2: LF@end_index=18(int)
# Dest: LF@state_loop=true(bool)
# Executing instruction: IJUMPIFEQ at line: 166 with following arguments:
# Arg1: LF@state_loop=true(bool)
# Arg2: Const@=false(bool)
# Executing instruction: IGETCHAR at line: 167 with following arguments:
# Arg1: LF@input=hgdfh_DFGkf5665678(string)
# Arg2: LF@index=10(int)
# Dest: LF@tmp_char=k(string)
# Executing instruction: ICONCAT at line: 168 with following arguments:
# Arg1: LF@&result=hgdfh_DFGk(string)
# Arg2: LF@tmp_char=f(string)
# Dest: LF@&result=hgdfh_DFGk(string)
# Executing instruction: IADD at line: 169 with following arguments:
# Arg1: LF@index=10(int)
# Arg2: Const@=1(int)
# Dest: LF@index=10(int)
# Executing instruction: IJUMP at line: 170 with following arguments:
# Executing instruction: ILABEL at line: 164 with following arguments:
# Executing instruction: ILS at line: 165 with following arguments:
# Arg1: LF@index=11(int)
# Arg2: LF@end_index=18(int)
# Dest: LF@state_loop=true(bool)
# Executing instruction: IJUMPIFEQ at line: 166 with following arguments:
# Arg1: LF@state_loop=true(bool)
# Arg2: Const@=false(bool)
# Executing instruction: IGETCHAR at line: 167 with following arguments:
# Arg1: LF@input=hgdfh_DFGkf5665678(string)
# Arg2: LF@index=11(int)
# Dest: LF@tmp_char=f(string)
# Executing instruction: ICONCAT at line: 168 with following arguments:
# Arg1: LF@&result=hgdfh_DFGkf(string)
# Arg2: LF@tmp_char=5(string)
# Dest: LF@&result=hgdfh_DFGkf(string)
# Executing instruction: IADD at line: 169 with following arguments:
# Arg1: LF@index=11(int)
# Arg2: Const@=1(int)
# Dest: LF@index=11(int)
# Executing instruction: IJUMP at line: 170 with following arguments:
# Executing instruction: ILABEL at line: 164 with following arguments:
# Executing instruction: ILS at line: 165 with following arguments:
# Arg1: LF@index=12(int)
# Arg2: LF@end_index=18(int)
# Dest: LF@state_loop=true(bool)
# Executing instruction: IJUMPIFEQ at line: 166 with following arguments:
# Arg1: LF@state_loop=true(bool)
# Arg2: Const@=false(bool)
# Executing instruction: IGETCHAR at line: 167 with following arguments:
# Arg1: LF@input=hgdfh_DFGkf5665678(string)
# Arg2: LF@index=12(int)
# Dest: LF@tmp_char=5(string)
# Executing instruction: ICONCAT at line: 168 with following arguments:
# Arg1: LF@&result=hgdfh_DFGkf5(string)
# Arg2: LF@tmp_char=6(string)
# Dest: LF@&result=hgdfh_DFGkf5(string)
# Executing instruction: IADD at line: 169 with following arguments:
# Arg1: LF@index=12(int)
# Arg2: Const@=1(int)
# Dest: LF@index=12(int)
# Executing instruction: IJUMP at line: 170 with following arguments:
# Executing instruction: ILABEL at line: 164 with following arguments:
# Executing instruction: ILS at line: 165 with following arguments:
# Arg1: LF@index=13(int)
# Arg2: LF@end_index=18(int)
# Dest: LF@state_loop=true(bool)
# Executing instruction: IJUMPIFEQ at line: 166 with following arguments:
# Arg1: LF@state_loop=true(bool)
# Arg2: Const@=false(bool)
# Executing instruction: IGETCHAR at line: 167 with following arguments:
# Arg1: LF@input=hgdfh_DFGkf5665678(string)
# Arg2: LF@index=13(int)
# Dest: LF@tmp_char=6(string)
# Executing instruction: ICONCAT at line: 168 with following arguments:
# Arg1: LF@&result=hgdfh_DFGkf56(string)
# Arg2: LF@tmp_char=6(string)
# Dest: LF@&result=hgdfh_DFGkf56(string)
# Executing instruction: IADD at line: 169 with following arguments:
# Arg1: LF@index=13(int)
# Arg2: Const@=1(int)
# Dest: LF@index=13(int)
# Executing instruction: IJUMP at line: 170 with following arguments:
# Executing instruction: ILABEL at line: 164 with following arguments:
# Executing instruction: ILS at line: 165 with following arguments:
# Arg1: LF@index=14(int)
# Arg2: LF@end_index=18(int)
# Dest: LF@state_loop=true(bool)
# Executing instruction: IJUMPIFEQ at line: 166 with following arguments:
# Arg1: LF@state_loop=true(bool)
# Arg2: Const@=false(bool)
# Executing instruction: IGETCHAR at line: 167 with following arguments:
# Arg1: LF@input=hgdfh_DFGkf5665678(string)
# Arg2: LF@index=14(int)
# Dest: LF@tmp_char=6(string)
# Executing instruction: ICONCAT at line: 168 with following arguments:
# Arg1: LF@&result=hgdfh_DFGkf566(string)
# Arg2: LF@tmp_char=5(string)
# Dest: LF@&result=hgdfh_DFGkf566(string)
# Executing instruction: IADD at line: 169 with following arguments:
# Arg1: LF@index=14(int)
# Arg2: Const@=1(int)
# Dest: LF@index=14(int)
# Executing instruction: IJUMP at line: 170 with following arguments:
# Executing instruction: ILABEL at line: 164 with following arguments:
# Executing instruction: ILS at line: 165 with following arguments:
# Arg1: LF@index=15(int)
# Arg2: LF@end_index=18(int)
# Dest: LF@state_loop=true(bool)
# Executing instruction: IJUMPIFEQ at line: 166 with following arguments:
# Arg1: LF@state_loop=true(bool)
# Arg2: Const@=false(bool)
# Executing instruction: IGETCHAR at line: 167 with following arguments:
# Arg1: LF@input=hgdfh_DFGkf5665678(string)
# Arg2: LF@index=15(int)
# Dest: LF@tmp_char=5(string)
# Executing instruction: ICONCAT at line: 168 with following arguments:
# Arg1: LF@&result=hgdfh_DFGkf5665(string)
# Arg2: LF@tmp_char=6(string)
# Dest: LF@&result=hgdfh_DFGkf5665(string)
# Executing instruction: IADD at line: 169 with following arguments:
# Arg1: LF@index=15(int)
# Arg2: Const@=1(int)
# Dest: LF@index=15(int)
# Executing instruction: IJUMP at line: 170 with following arguments:
# Executing instruction: ILABEL at line: 164 with following arguments:
# Executing instruction: ILS at line: 165 with following arguments:
# Arg1: LF@index=16(int)
# Arg2: LF@end_index=18(int)
# Dest: LF@state_loop=true(bool)
# Executing instruction: IJUMPIFEQ at line: 166 with following arguments:
# Arg1: LF@state_loop=true(bool)
# Arg2: Const@=false(bool)
# Executing instruction: IGETCHAR at line: 167 with following arguments:
# Arg1: LF@input=hgdfh_DFGkf5665678(string)
# Arg2: LF@index=16(int)
# Dest: LF@tmp_char=6(string)
# Executing instruction: ICONCAT at line: 168 with following arguments:
# Arg1: LF@&result=hgdfh_DFGkf56656(string)
# Arg2: LF@tmp_char=7(string)
# Dest: LF@&result=hgdfh_DFGkf56656(string)
# Executing instruction: IADD at line: 169 with following arguments:
# Arg1: LF@index=16(int)
# Arg2: Const@=1(int)
# Dest: LF@index=16(int)
# Executing instruction: IJUMP at line: 170 with following arguments:
# Executing instruction: ILABEL at line: 164 with following arguments:
# Executing instruction: ILS at line: 165 with following arguments:
# Arg1: LF@index=17(int)
# Arg2: LF@end_index=18(int)
# Dest: LF@state_loop=true(bool)
# Executing instruction: IJUMPIFEQ at line: 166 with following arguments:
# Arg1: LF@state_loop=true(bool)
# Arg2: Const@=false(bool)
# Executing instruction: IGETCHAR at line: 167 with following arguments:
# Arg1: LF@input=hgdfh_DFGkf5665678(string)
# Arg2: LF@index=17(int)
# Dest: LF@tmp_char=7(string)
# Executing instruction: ICONCAT at line: 168 with following arguments:
# Arg1: LF@&result=hgdfh_DFGkf566567(string)
# Arg2: LF@tmp_char=8(string)
# Dest: LF@&result=hgdfh_DFGkf566567(string)
# Executing instruction: IADD at line: 169 with following arguments:
# Arg1: LF@index=17(int)
# Arg2: Const@=1(int)
# Dest: LF@index=17(int)
# Executing instruction: IJUMP at line: 170 with following arguments:
# Executing instruction: ILABEL at line: 164 with following arguments:
# Executing instruction: ILS at line: 165 with following arguments:
# Arg1: LF@index=18(int)
# Arg2: LF@end_index=18(int)
# Dest: LF@state_loop=true(bool)
# Executing instruction: IJUMPIFEQ at line: 166 with following arguments:
# Arg1: LF@state_loop=false(bool)
# Arg2: Const@=false(bool)
# Executing instruction: ILABEL at line: 171 with following arguments:
# Executing instruction: ILABEL at line: 172 with following arguments:
# Executing instruction: IPUSHS at line: 173 with following arguments:
# Arg1: LF@&result=hgdfh_DFGkf5665678(string)
# Dest: Stack@()
# Executing instruction: IPOPFRAME at line: 174 with following arguments:
# Executing instruction: IDEFVAR at line: 175 with following arguments:
# Dest: LF@&&function_return_8
# Executing instruction: IPOPS at line: 176 with following arguments:
# Arg1: Stack@=hgdfh_DFGkf5665678(string)
# Dest: LF@&&function_return_8()
# Executing instruction: IPUSHS at line: 177 with following arguments:
# Arg1: LF@&&function_return_8=hgdfh_DFGkf5665678(string)
# Dest: Stack@()
# Executing instruction: IPOPS at line: 178 with following arguments:
# Arg1: Stack@=hgdfh_DFGkf5665678(string)
# Dest: LF@res=h(string)
# Executing instruction: ICLEARS at line: 179 with following arguments:
# Executing instruction: IPUSHS at line: 180 with following arguments:
# Arg1: LF@res=hgdfh_DFGkf5665678(string)
# Dest: Stack@()
# Executing instruction: ICREATEFRAME at line: 181 with following arguments:
# Executing instruction: IDEFVAR at line: 182 with following arguments:
# Dest: TF@expr
# Executing instruction: IPOPS at line: 183 with following arguments:
# Arg1: Stack@=hgdfh_DFGkf5665678(string)
# Dest: TF@expr()
# Executing instruction: IWRITE at line: 184 with following arguments:
# Arg1: TF@expr=hgdfh_DFGkf5665678(string)
# Executing instruction: ICLEARS at line: 185 with following arguments:
# Executing instruction: IPUSHS at line: 186 with following arguments:
# Arg1: LF@i=1(int)
# Dest: Stack@()
# Executing instruction: IPUSHS at line: 187 with following arguments:
# Arg1: Const@=1(int)
# Dest: Stack@()
# Executing instruction: IADDS at line: 188 with following arguments:
# Arg1: Stack@=1(int)
# Arg2: Stack@=1(int)
# Dest: Stack@()
# Executing instruction: IPOPS at line: 189 with following arguments:
# Arg1: Stack@=2(int)
# Dest: LF@i=1(int)
# Executing instruction: ICLEARS at line: 190 with following arguments:
# Executing instruction: IJUMP at line: 191 with following arguments:
# Executing instruction: ILABEL at line: 33 with following arguments:
# Executing instruction: IPUSHS at line: 34 with following arguments:
# Arg1: LF@i=2(int)
# Dest: Stack@()
# Executing instruction: IPUSHS at line: 35 with following arguments:
# Arg1: LF@a_len=18(int)
# Dest: Stack@()
# Executing instruction: IGTS at line: 36 with following arguments:
# Arg1: Stack@=2(int)
# Arg2: Stack@=18(int)
# Dest: Stack@()
# Executing instruction: INOTS at line: 37 with following arguments:
# Arg1: Stack@=false(bool)
# Dest: Stack@()
# Executing instruction: IPUSHS at line: 38 with following arguments:
# Arg1: Const@=true(bool)
# Dest: Stack@()
# Executing instruction: IJUMPIFNEQS at line: 39 with following arguments:
# Arg1: Stack@=true(bool)
# Arg2: Stack@=true(bool)
# Executing instruction: IPUSHS at line: 40 with following arguments:
# Arg1: LF@a=hgdfh_DFGkf5665678(string)
# Dest: Stack@()
# Executing instruction: IPUSHS at line: 41 with following arguments:
# Arg1: Const@=1(int)
# Dest: Stack@()
# Executing instruction: IPUSHS at line: 42 with following arguments:
# Arg1: LF@i=2(int)
# Dest: Stack@()
# Executing instruction: ICREATEFRAME at line: 43 with following arguments:
# Executing instruction: IPUSHFRAME at line: 44 with following arguments:
# Executing instruction: IDEFVAR at line: 45 with following arguments:
# Dest: LF@&result
# Executing instruction: IMOVE at line: 46 with following arguments:
# Arg1: Const@=(string)
# Dest: LF@&result()
# Executing instruction: IDEFVAR at line: 47 with following arguments:
# Dest: LF@out_len
# Executing instruction: IPOPS at line: 48 with following arguments:
# Arg1: Stack@=2(int)
# Dest: LF@out_len()
# Executing instruction: IDEFVAR at line: 49 with following arguments:
# Dest: LF@index
# Executing instruction: IPOPS at line: 50 with following arguments:
# Arg1: Stack@=1(int)
# Dest: LF@index()
# Executing instruction: IDEFVAR at line: 51 with following arguments:
# Dest: LF@input
# Executing instruction: IPOPS at line: 52 with following arguments:
# Arg1: Stack@=hgdfh_DFGkf5665678(string)
# Dest: LF@input()
# Executing instruction: IDEFVAR at line: 53 with following arguments:
# Dest: LF@str_len
# Executing instruction: ISTRLEN at line: 54 with following arguments:
# Arg1: LF@input=hgdfh_DFGkf5665678(string)
# Dest: LF@str_len()
# Executing instruction: IPUSHS at line: 55 with following arguments:
# Arg1: LF@str_len=18(int)
# Dest: Stack@()
# Executing instruction: IPUSHS at line: 56 with following arguments:
# Arg1: Const@=0(int)
# Dest: Stack@()
# Executing instruction: IEQS at line: 57 with following arguments:
# Arg1: Stack@=18(int)
# Arg2: Stack@=0(int)
# Dest: Stack@()
# Executing instruction: IPUSHS at line: 58 with following arguments:
# Arg1: LF@index=1(int)
# Dest: Stack@()
# Executing instruction: IPUSHS at line: 59 with following arguments:
# Arg1: Const@=0(int)
# Dest: Stack@()
# Executing instruction: IGTS at line: 60 with following arguments:
# Arg1: Stack@=1(int)
# Arg2: Stack@=0(int)
# Dest: Stack@()
# Executing instruction: INOTS at line: 61 with following arguments:
# Arg1: Stack@=true(bool)
# Dest: Stack@()
# Executing instruction: IORS at line: 62 with following arguments:
# Arg1: Stack@=false(bool)
# Arg2: Stack@=false(bool)
# Dest: Stack@()
# Executing instruction: IPUSHS at line: 63 with following arguments:
# Arg1: Const@=true(bool)
# Dest: Stack@()
# Executing instruction: IJUMPIFEQS at line: 64 with following arguments:
# Arg1: Stack@=false(bool)
# Arg2: Stack@=true(bool)
# Executing instruction: IPUSHS at line: 65 with following arguments:
# Arg1: LF@out_len=2(int)
# Dest: Stack@()
# Executing instruction: IPUSHS at line: 66 with following arguments:
# Arg1: Const@=0(int)
# Dest: Stack@()
# Executing instruction: ILSS at line: 67 with following arguments:
# Arg1: Stack@=2(int)
# Arg2: Stack@=0(int)
# Dest: Stack@()
# Executing instruction: IPUSHS at line: 68 with following arguments:
# Arg1: LF@out_len=2(int)
# Dest: Stack@()
# Executing instruction: IPUSHS at line: 69 with following arguments:
# Arg1: LF@str_len=18(int)
# Dest: Stack@()
# Executing instruction: IPUSHS at line: 70 with following arguments:
# Arg1: LF@index=1(int)
# Dest: Stack@()
# Executing instruction: ISUBS at line: 71 with following arguments:
# Arg1: Stack@=18(int)
# Arg2: Stack@=1(int)
# Dest: Stack@()
# Executing instruction: IGTS at line: 72 with following arguments:
# Arg1: Stack@=2(int)
# Arg2: Stack@=17(int)
# Dest: Stack@()
# Executing instruction: IORS at line: 73 with following arguments:
# Arg1: Stack@=false(bool)
# Arg2: Stack@=false(bool)
# Dest: Stack@()
# Executing instruction: IPUSHS at line: 74 with following arguments:
# Arg1: Const@=false(bool)
# Dest: Stack@()
# Executing instruction: IJUMPIFEQS at line: 75 with following arguments:
# Arg1: Stack@=false(bool)
# Arg2: Stack@=false(bool)
# Executing instruction: ILABEL at line: 82 with following arguments:
# Executing instruction: ISUB at line: 83 with following arguments:
# Arg1: LF@index=1(int)
# Arg2: Const@=1(int)
# Dest: LF@index=1(int)
# Executing instruction: IDEFVAR at line: 84 with following arguments:
# Dest: LF@end_index
# Executing instruction: IPUSHS at line: 85 with following arguments:
# Arg1: LF@index=0(int)
# Dest: Stack@()
# Executing instruction: IPUSHS at line: 86 with following arguments:
# Arg1: LF@out_len=2(int)
# Dest: Stack@()
# Executing instruction: IADDS at line: 87 with following arguments:
# Arg1: Stack@=0(int)
# Arg2: Stack@=2(int)
# Dest: Stack@()
# Executing instruction: IPOPS at line: 88 with following arguments:
# Arg1: Stack@=2(int)
# Dest: LF@end_index()
# Executing instruction: IDEFVAR at line: 89 with following arguments:
# Dest: LF@state_loop
# Executing instruction: IDEFVAR at line: 90 with following arguments:
# Dest: LF@tmp_char
# Executing instruction: ILABEL at line: 91 with following arguments:
# Executing instruction: ILS at line: 92 with following arguments:
# Arg1: LF@index=0(int)
# Arg2: LF@end_index=2(int)
# Dest: LF@state_loop()
# Executing instruction: IJUMPIFEQ at line: 93 with following arguments:
# Arg1: LF@state_loop=true(bool)
# Arg2: Const@=false(bool)
# Executing instruction: IGETCHAR at line: 94 with following arguments:
# Arg1: LF@input=hgdfh_DFGkf5665678(string)
# Arg2: LF@index=0(int)
# Dest: LF@tmp_char()
# Executing instruction: ICONCAT at line: 95 with following arguments:
# Arg1: LF@&result=(string)
# Arg2: LF@tmp_char=h(string)
# Dest: LF@&result=(string)
# Executing instruction: IADD at line: 96 with following arguments:
# Arg1: LF@index=0(int)
# Arg2: Const@=1(int)
# Dest: LF@index=0(int)
# Executing instruction: IJUMP at line: 97 with following arguments:
# Executing instruction: ILABEL at line: 91 with following arguments:
# Executing instruction: ILS at line: 92 with following arguments:
# Arg1: LF@index=1(int)
# Arg2: LF@end_index=2(int)
# Dest: LF@state_loop=true(bool)
# Executing instruction: IJUMPIFEQ at line: 93 with following arguments:
# Arg1: LF@state_loop=true(bool)
# Arg2: Const@=false(bool)
# Executing instruction: IGETCHAR at line: 94 with following arguments:
# Arg1: LF@input=hgdfh_DFGkf5665678(string)
# Arg2: LF@index=1(int)
# Dest: LF@tmp_char=h(string)
# Executing instruction: ICONCAT at line: 95 with following arguments:
# Arg1: LF@&result=h(string)
# Arg2: LF@tmp_char=g(string)
# Dest: LF@&result=h(string)
# Executing instruction: IADD at line: 96 with following arguments:
# Arg1: LF@index=1(int)
# Arg2: Const@=1(int)
# Dest: LF@index=1(int)
# Executing instruction: IJUMP at line: 97 with following arguments:
# Executing instruction: ILABEL at line: 91 with following arguments:
# Executing instruction: ILS at line: 92 with following arguments:
# Arg1: LF@index=2(int)
# Arg2: LF@end_index=2(int)
# Dest: LF@state_loop=true(bool)
# Executing instruction: IJUMPIFEQ at line: 93 with following arguments:
# Arg1: LF@state_loop=false(bool)
# Arg2: Const@=false(bool)
# Executing instruction: ILABEL at line: 98 with following arguments:
# Executing instruction: ILABEL at line: 99 with following arguments:
# Executing instruction: IPUSHS at line: 100 with following arguments:
# Arg1: LF@&result=hg(string)
# Dest: Stack@()
# Executing instruction: IPOPFRAME at line: 101 with following arguments:
# Executing instruction: IDEFVAR at line: 102 with following arguments:
# Dest: LF@&&function_return_4
# Error at line: 102
# Symbol already exists!
# 
# STDOUT DIFF:
# --- expected
# +++ actual
# @@ -1 +1 @@

# -hhgdfh_DFGkf5665678hggdfh_DFGkf5665678hgddfh_DFGkf5665678hgdffh_DFGkf5665678hgdfhh_DFGkf5665678hgdfh__DFGkf5665678hgdfh_DDFGkf5665678hgdfh_DFFGkf5665678hgdfh_DFGGkf5665678hgdfh_DFGkkf5665678hgdfh_DFGkff5665678hgdfh_DFGkf55665678hgdfh_DFGkf56665678hgdfh_DFGkf56665678hgdfh_DFGkf56655678hgdfh_DFGkf56656678hgdfh_DFGkf56656778hgdfh_DFGkf56656788
# +hhgdfh_DFGkf5665678

# INTERPRETER STDIN: 
# 
#
# EXPECTED COMPILER EXIT CODE: 0
# CURRENT COMPILER EXIT CODE: 0
# EXPECTED INTERPRETER EXIT CODE: 0
# CURRENT INTERPRETER EXIT CODE: 52
# PRICE: ---
# 
#   1: ' substr in loop
#   2: 
#   3: scope
#   4:     dim a as string
#   5:     dim a_len as integer
#   6:     dim res as string
#   7:     a = !"hgdfh_DFGkf5665678"
#   8:     a_len =  length(a)
#   9:     dim i as integer = 1
#  10: 
#  11:     do while i <= a_len
#  12:         res = substr(a, 1, i)
#  13:         print res;
#  14:         res = substr(a, i, a_len)
#  15:         print res;
#  16:         i = i + 1
#  17:     loop
#  18:     
#  19: end scope

########################################

.IFJcode17                                                                      #     1/192
LABEL &&&scope                                                                  #     2/192
CREATEFRAME                                                                     #     3/192
PUSHFRAME                                                                       #     4/192
DEFVAR LF@a                                                                     #     5/192
MOVE LF@a string@                                                               #     6/192
DEFVAR LF@a_len                                                                 #     7/192
MOVE LF@a_len int@0                                                             #     8/192
DEFVAR LF@res                                                                   #     9/192
MOVE LF@res string@                                                             #    10/192
PUSHS string@hgdfh_DFGkf5665678                                                 #    11/192
POPS LF@a                                                                       #    12/192
CLEARS                                                                          #    13/192
PUSHS LF@a                                                                      #    14/192
CREATEFRAME                                                                     #    15/192
PUSHFRAME                                                                       #    16/192
DEFVAR LF@&result                                                               #    17/192
DEFVAR LF@&in                                                                   #    18/192
POPS LF@&in                                                                     #    19/192
STRLEN LF@&result LF@&in                                                        #    20/192
PUSHS LF@&result                                                                #    21/192
POPFRAME                                                                        #    22/192
DEFVAR LF@&&function_return_0                                                   #    23/192
POPS LF@&&function_return_0                                                     #    24/192
PUSHS LF@&&function_return_0                                                    #    25/192
POPS LF@a_len                                                                   #    26/192
CLEARS                                                                          #    27/192
DEFVAR LF@i                                                                     #    28/192
MOVE LF@i int@0                                                                 #    29/192
PUSHS int@1                                                                     #    30/192
POPS LF@i                                                                       #    31/192
CLEARS                                                                          #    32/192
LABEL $loop_top_0                                                               #    33/192
PUSHS LF@i                                                                      #    34/192
PUSHS LF@a_len                                                                  #    35/192
GTS                                                                             #    36/192
NOTS                                                                            #    37/192
PUSHS bool@true                                                                 #    38/192
JUMPIFNEQS $loop_end_0                                                          #    39/192
PUSHS LF@a                                                                      #    40/192
PUSHS int@1                                                                     #    41/192
PUSHS LF@i                                                                      #    42/192
CREATEFRAME                                                                     #    43/192
PUSHFRAME                                                                       #    44/192
DEFVAR LF@&result                                                               #    45/192
MOVE LF@&result string@                                                         #    46/192
DEFVAR LF@out_len                                                               #    47/192
POPS LF@out_len                                                                 #    48/192
DEFVAR LF@index                                                                 #    49/192
POPS LF@index                                                                   #    50/192
DEFVAR LF@input                                                                 #    51/192
POPS LF@input                                                                   #    52/192
DEFVAR LF@str_len                                                               #    53/192
STRLEN LF@str_len LF@input                                                      #    54/192
PUSHS LF@str_len                                                                #    55/192
PUSHS int@0                                                                     #    56/192
EQS                                                                             #    57/192
PUSHS LF@index                                                                  #    58/192
PUSHS int@0                                                                     #    59/192
GTS                                                                             #    60/192
NOTS                                                                            #    61/192
ORS                                                                             #    62/192
PUSHS bool@true                                                                 #    63/192
JUMPIFEQS $*end_chr_function_0                                                  #    64/192
PUSHS LF@out_len                                                                #    65/192
PUSHS int@0                                                                     #    66/192
LTS                                                                             #    67/192
PUSHS LF@out_len                                                                #    68/192
PUSHS LF@str_len                                                                #    69/192
PUSHS LF@index                                                                  #    70/192
SUBS                                                                            #    71/192
GTS                                                                             #    72/192
ORS                                                                             #    73/192
PUSHS bool@false                                                                #    74/192
JUMPIFEQS $*else_branch_0                                                       #    75/192
PUSHS LF@str_len                                                                #    76/192
PUSHS LF@index                                                                  #    77/192
SUBS                                                                            #    78/192
PUSHS int@1                                                                     #    79/192
ADDS                                                                            #    80/192
POPS LF@out_len                                                                 #    81/192
LABEL $*else_branch_0                                                           #    82/192
SUB LF@index LF@index int@1                                                     #    83/192
DEFVAR LF@end_index                                                             #    84/192
PUSHS LF@index                                                                  #    85/192
PUSHS LF@out_len                                                                #    86/192
ADDS                                                                            #    87/192
POPS LF@end_index                                                               #    88/192
DEFVAR LF@state_loop                                                            #    89/192
DEFVAR LF@tmp_char                                                              #    90/192
LABEL $*loop_top_0                                                              #    91/192
LT LF@state_loop LF@index LF@end_index                                          #    92/192
JUMPIFEQ $*end_loop_0 LF@state_loop bool@false                                  #    93/192
GETCHAR LF@tmp_char LF@input LF@index                                           #    94/192
CONCAT LF@&result LF@&result LF@tmp_char                                        #    95/192
ADD LF@index LF@index int@1                                                     #    96/192
JUMP $*loop_top_0                                                               #    97/192
LABEL $*end_loop_0                                                              #    98/192
LABEL $*end_chr_function_0                                                      #    99/192
PUSHS LF@&result                                                                #   100/192
POPFRAME                                                                        #   101/192
DEFVAR LF@&&function_return_4                                                   #   102/192
POPS LF@&&function_return_4                                                     #   103/192
PUSHS LF@&&function_return_4                                                    #   104/192
POPS LF@res                                                                     #   105/192
CLEARS                                                                          #   106/192
PUSHS LF@res                                                                    #   107/192
CREATEFRAME                                                                     #   108/192
DEFVAR TF@expr                                                                  #   109/192
POPS TF@expr                                                                    #   110/192
WRITE TF@expr                                                                   #   111/192
CLEARS                                                                          #   112/192
PUSHS LF@a                                                                      #   113/192
PUSHS LF@i                                                                      #   114/192
PUSHS LF@a_len                                                                  #   115/192
CREATEFRAME                                                                     #   116/192
PUSHFRAME                                                                       #   117/192
DEFVAR LF@&result                                                               #   118/192
MOVE LF@&result string@                                                         #   119/192
DEFVAR LF@out_len                                                               #   120/192
POPS LF@out_len                                                                 #   121/192
DEFVAR LF@index                                                                 #   122/192
POPS LF@index                                                                   #   123/192
DEFVAR LF@input                                                                 #   124/192
POPS LF@input                                                                   #   125/192
DEFVAR LF@str_len                                                               #   126/192
STRLEN LF@str_len LF@input                                                      #   127/192
PUSHS LF@str_len                                                                #   128/192
PUSHS int@0                                                                     #   129/192
EQS                                                                             #   130/192
PUSHS LF@index                                                                  #   131/192
PUSHS int@0                                                                     #   132/192
GTS                                                                             #   133/192
NOTS                                                                            #   134/192
ORS                                                                             #   135/192
PUSHS bool@true                                                                 #   136/192
JUMPIFEQS $*end_chr_function_1                                                  #   137/192
PUSHS LF@out_len                                                                #   138/192
PUSHS int@0                                                                     #   139/192
LTS                                                                             #   140/192
PUSHS LF@out_len                                                                #   141/192
PUSHS LF@str_len                                                                #   142/192
PUSHS LF@index                                                                  #   143/192
SUBS                                                                            #   144/192
GTS                                                                             #   145/192
ORS                                                                             #   146/192
PUSHS bool@false                                                                #   147/192
JUMPIFEQS $*else_branch_1                                                       #   148/192
PUSHS LF@str_len                                                                #   149/192
PUSHS LF@index                                                                  #   150/192
SUBS                                                                            #   151/192
PUSHS int@1                                                                     #   152/192
ADDS                                                                            #   153/192
POPS LF@out_len                                                                 #   154/192
LABEL $*else_branch_1                                                           #   155/192
SUB LF@index LF@index int@1                                                     #   156/192
DEFVAR LF@end_index                                                             #   157/192
PUSHS LF@index                                                                  #   158/192
PUSHS LF@out_len                                                                #   159/192
ADDS                                                                            #   160/192
POPS LF@end_index                                                               #   161/192
DEFVAR LF@state_loop                                                            #   162/192
DEFVAR LF@tmp_char                                                              #   163/192
LABEL $*loop_top_1                                                              #   164/192
LT LF@state_loop LF@index LF@end_index                                          #   165/192
JUMPIFEQ $*end_loop_1 LF@state_loop bool@false                                  #   166/192
GETCHAR LF@tmp_char LF@input LF@index                                           #   167/192
CONCAT LF@&result LF@&result LF@tmp_char                                        #   168/192
ADD LF@index LF@index int@1                                                     #   169/192
JUMP $*loop_top_1                                                               #   170/192
LABEL $*end_loop_1                                                              #   171/192
LABEL $*end_chr_function_1                                                      #   172/192
PUSHS LF@&result                                                                #   173/192
POPFRAME                                                                        #   174/192
DEFVAR LF@&&function_return_8                                                   #   175/192
POPS LF@&&function_return_8                                                     #   176/192
PUSHS LF@&&function_return_8                                                    #   177/192
POPS LF@res                                                                     #   178/192
CLEARS                                                                          #   179/192
PUSHS LF@res                                                                    #   180/192
CREATEFRAME                                                                     #   181/192
DEFVAR TF@expr                                                                  #   182/192
POPS TF@expr                                                                    #   183/192
WRITE TF@expr                                                                   #   184/192
CLEARS                                                                          #   185/192
PUSHS LF@i                                                                      #   186/192
PUSHS int@1                                                                     #   187/192
ADDS                                                                            #   188/192
POPS LF@i                                                                       #   189/192
CLEARS                                                                          #   190/192
JUMP $loop_top_0                                                                #   191/192
LABEL $loop_end_0                                                               #   192/192