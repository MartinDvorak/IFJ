# 2017-11-29 12:53:23.630233
# SECTION: 06_loops
# TEST: 02
# INFO: multiple while loop
# REQUIRED EXTENSIONS: 
# ACTIVATED EXTENSIONS: 
# STATE: FAIL
# 
# COMPILER STDERR:
# 
# INTERPRETER STDERR:
# Executing instruction: ILABEL at line: 2 with following arguments:
# Executing instruction: ICREATEFRAME at line: 3 with following arguments:
# Executing instruction: IPUSHFRAME at line: 4 with following arguments:
# Executing instruction: IDEFVAR at line: 5 with following arguments:
# Dest: LF@a
# Executing instruction: IMOVE at line: 6 with following arguments:
# Arg1: Const@=0(int)
# Dest: LF@a()
# Executing instruction: IPUSHS at line: 7 with following arguments:
# Arg1: Const@=0(int)
# Dest: Stack@()
# Executing instruction: IPUSHS at line: 8 with following arguments:
# Arg1: Const@=25(int)
# Dest: Stack@()
# Executing instruction: ISUBS at line: 9 with following arguments:
# Arg1: Stack@=0(int)
# Arg2: Stack@=25(int)
# Dest: Stack@()
# Executing instruction: IPOPS at line: 10 with following arguments:
# Arg1: Stack@=-25(int)
# Dest: LF@a=0(int)
# Executing instruction: ICLEARS at line: 11 with following arguments:
# Executing instruction: ILABEL at line: 12 with following arguments:
# Executing instruction: IPUSHS at line: 13 with following arguments:
# Arg1: LF@a=-25(int)
# Dest: Stack@()
# Executing instruction: IPUSHS at line: 14 with following arguments:
# Arg1: Const@=10(int)
# Dest: Stack@()
# Executing instruction: IGTS at line: 15 with following arguments:
# Arg1: Stack@=-25(int)
# Arg2: Stack@=10(int)
# Dest: Stack@()
# Executing instruction: INOTS at line: 16 with following arguments:
# Arg1: Stack@=false(bool)
# Dest: Stack@()
# Executing instruction: IPUSHS at line: 17 with following arguments:
# Arg1: Const@=true(bool)
# Dest: Stack@()
# Executing instruction: IJUMPIFNEQS at line: 18 with following arguments:
# Arg1: Stack@=true(bool)
# Arg2: Stack@=true(bool)
# Executing instruction: IPUSHS at line: 19 with following arguments:
# Arg1: Const@=2(int)
# Dest: Stack@()
# Executing instruction: IPUSHS at line: 20 with following arguments:
# Arg1: LF@a=-25(int)
# Dest: Stack@()
# Executing instruction: IMULTS at line: 21 with following arguments:
# Arg1: Stack@=2(int)
# Arg2: Stack@=-25(int)
# Dest: Stack@()
# Executing instruction: IPUSHS at line: 22 with following arguments:
# Arg1: Const@=0.02(double)
# Dest: Stack@()
# Executing instruction: IDEFVAR at line: 23 with following arguments:
# Dest: LF@$tmp1l_2
# Executing instruction: IPOPS at line: 24 with following arguments:
# Arg1: Stack@=0.02(double)
# Dest: LF@$tmp1l_2()
# Executing instruction: IINT2FLOATS at line: 25 with following arguments:
# Arg1: Stack@=-50(int)
# Dest: Stack@()
# Executing instruction: IPUSHS at line: 26 with following arguments:
# Arg1: LF@$tmp1l_2=0.02(double)
# Dest: Stack@()
# Executing instruction: IADDS at line: 27 with following arguments:
# Arg1: Stack@=-50(double)
# Arg2: Stack@=0.02(double)
# Dest: Stack@()
# Executing instruction: ICREATEFRAME at line: 28 with following arguments:
# Executing instruction: IDEFVAR at line: 29 with following arguments:
# Dest: TF@expr
# Executing instruction: IPOPS at line: 30 with following arguments:
# Arg1: Stack@=-49.98(double)
# Dest: TF@expr()
# Executing instruction: IWRITE at line: 31 with following arguments:
# Arg1: TF@expr=-49.98(double)
# Executing instruction: ICLEARS at line: 32 with following arguments:
# Executing instruction: IPUSHS at line: 33 with following arguments:
# Arg1: LF@a=-25(int)
# Dest: Stack@()
# Executing instruction: IPUSHS at line: 34 with following arguments:
# Arg1: Const@=8(int)
# Dest: Stack@()
# Executing instruction: IADDS at line: 35 with following arguments:
# Arg1: Stack@=-25(int)
# Arg2: Stack@=8(int)
# Dest: Stack@()
# Executing instruction: IPOPS at line: 36 with following arguments:
# Arg1: Stack@=-17(int)
# Dest: LF@a=-25(int)
# Executing instruction: ICLEARS at line: 37 with following arguments:
# Executing instruction: IJUMP at line: 38 with following arguments:
# Executing instruction: ILABEL at line: 12 with following arguments:
# Executing instruction: IPUSHS at line: 13 with following arguments:
# Arg1: LF@a=-17(int)
# Dest: Stack@()
# Executing instruction: IPUSHS at line: 14 with following arguments:
# Arg1: Const@=10(int)
# Dest: Stack@()
# Executing instruction: IGTS at line: 15 with following arguments:
# Arg1: Stack@=-17(int)
# Arg2: Stack@=10(int)
# Dest: Stack@()
# Executing instruction: INOTS at line: 16 with following arguments:
# Arg1: Stack@=false(bool)
# Dest: Stack@()
# Executing instruction: IPUSHS at line: 17 with following arguments:
# Arg1: Const@=true(bool)
# Dest: Stack@()
# Executing instruction: IJUMPIFNEQS at line: 18 with following arguments:
# Arg1: Stack@=true(bool)
# Arg2: Stack@=true(bool)
# Executing instruction: IPUSHS at line: 19 with following arguments:
# Arg1: Const@=2(int)
# Dest: Stack@()
# Executing instruction: IPUSHS at line: 20 with following arguments:
# Arg1: LF@a=-17(int)
# Dest: Stack@()
# Executing instruction: IMULTS at line: 21 with following arguments:
# Arg1: Stack@=2(int)
# Arg2: Stack@=-17(int)
# Dest: Stack@()
# Executing instruction: IPUSHS at line: 22 with following arguments:
# Arg1: Const@=0.02(double)
# Dest: Stack@()
# Executing instruction: IDEFVAR at line: 23 with following arguments:
# Dest: LF@$tmp1l_2
# Error at line: 23
# Symbol already exists!
# 
# STDOUT DIFF:
# --- expected
# +++ actual
# @@ -1 +1 @@

# --49.98-33.98-17.98-1.98 14.02 100 89 78 67 56 45 34 23 12 1
# +-49.98

# INTERPRETER STDIN: 
# 
#
# EXPECTED COMPILER EXIT CODE: 0
# CURRENT COMPILER EXIT CODE: 0
# EXPECTED INTERPRETER EXIT CODE: 0
# CURRENT INTERPRETER EXIT CODE: 52
# PRICE: ---
# 
#   1: ' multiple while loop
#   2: scope
#   3: 	dim a as integer = 0 - 25
#   4: 	do while a <= 10
#   5: 		print 2 * a + 0.02;
#   6: 		a = a + 8
#   7: 	loop
#   8: 	a = (0 - 200 + 300)
#   9: 	do while a >= 0
#  10: 		print a;
#  11: 		a = a - 11
#  12: 	loop
#  13: end scope

########################################

.IFJcode17                                                                      #     1/66
LABEL &&&scope                                                                  #     2/66
CREATEFRAME                                                                     #     3/66
PUSHFRAME                                                                       #     4/66
DEFVAR LF@a                                                                     #     5/66
MOVE LF@a int@0                                                                 #     6/66
PUSHS int@0                                                                     #     7/66
PUSHS int@25                                                                    #     8/66
SUBS                                                                            #     9/66
POPS LF@a                                                                       #    10/66
CLEARS                                                                          #    11/66
LABEL $loop_top_0                                                               #    12/66
PUSHS LF@a                                                                      #    13/66
PUSHS int@10                                                                    #    14/66
GTS                                                                             #    15/66
NOTS                                                                            #    16/66
PUSHS bool@true                                                                 #    17/66
JUMPIFNEQS $loop_end_0                                                          #    18/66
PUSHS int@2                                                                     #    19/66
PUSHS LF@a                                                                      #    20/66
MULS                                                                            #    21/66
PUSHS float@0.02                                                                #    22/66
DEFVAR LF@$tmp1l_2                                                              #    23/66
POPS LF@$tmp1l_2                                                                #    24/66
INT2FLOATS                                                                      #    25/66
PUSHS LF@$tmp1l_2                                                               #    26/66
ADDS                                                                            #    27/66
CREATEFRAME                                                                     #    28/66
DEFVAR TF@expr                                                                  #    29/66
POPS TF@expr                                                                    #    30/66
WRITE TF@expr                                                                   #    31/66
CLEARS                                                                          #    32/66
PUSHS LF@a                                                                      #    33/66
PUSHS int@8                                                                     #    34/66
ADDS                                                                            #    35/66
POPS LF@a                                                                       #    36/66
CLEARS                                                                          #    37/66
JUMP $loop_top_0                                                                #    38/66
LABEL $loop_end_0                                                               #    39/66
PUSHS int@0                                                                     #    40/66
PUSHS int@200                                                                   #    41/66
SUBS                                                                            #    42/66
PUSHS int@300                                                                   #    43/66
ADDS                                                                            #    44/66
POPS LF@a                                                                       #    45/66
CLEARS                                                                          #    46/66
LABEL $loop_top_1                                                               #    47/66
PUSHS LF@a                                                                      #    48/66
PUSHS int@0                                                                     #    49/66
LTS                                                                             #    50/66
NOTS                                                                            #    51/66
PUSHS bool@true                                                                 #    52/66
JUMPIFNEQS $loop_end_1                                                          #    53/66
PUSHS LF@a                                                                      #    54/66
CREATEFRAME                                                                     #    55/66
DEFVAR TF@expr                                                                  #    56/66
POPS TF@expr                                                                    #    57/66
WRITE TF@expr                                                                   #    58/66
CLEARS                                                                          #    59/66
PUSHS LF@a                                                                      #    60/66
PUSHS int@11                                                                    #    61/66
SUBS                                                                            #    62/66
POPS LF@a                                                                       #    63/66
CLEARS                                                                          #    64/66
JUMP $loop_top_1                                                                #    65/66
LABEL $loop_end_1                                                               #    66/66