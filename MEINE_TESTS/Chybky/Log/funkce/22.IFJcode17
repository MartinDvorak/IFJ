# 2017-11-29 12:53:23.126821
# SECTION: 02_functions
# TEST: 22
# INFO: Try to modify an argument passed by the value
# REQUIRED EXTENSIONS: 
# ACTIVATED EXTENSIONS: 
# STATE: FAIL
# 
# COMPILER STDERR:
# 
# INTERPRETER STDERR:
# Executing instruction: IJUMP at line: 2 with following arguments:
# Executing instruction: ILABEL at line: 14 with following arguments:
# Executing instruction: ICREATEFRAME at line: 15 with following arguments:
# Executing instruction: IPUSHFRAME at line: 16 with following arguments:
# Executing instruction: IDEFVAR at line: 17 with following arguments:
# Dest: LF@a
# Executing instruction: IMOVE at line: 18 with following arguments:
# Arg1: Const@=0(int)
# Dest: LF@a()
# Executing instruction: IPUSHS at line: 19 with following arguments:
# Arg1: Const@=10(int)
# Dest: Stack@()
# Executing instruction: IPOPS at line: 20 with following arguments:
# Arg1: Stack@=10(int)
# Dest: LF@a=0(int)
# Executing instruction: ICLEARS at line: 21 with following arguments:
# Executing instruction: IDEFVAR at line: 22 with following arguments:
# Dest: LF@b
# Executing instruction: IMOVE at line: 23 with following arguments:
# Arg1: Const@=0(int)
# Dest: LF@b()
# Executing instruction: IPUSHS at line: 24 with following arguments:
# Arg1: LF@a=10(int)
# Dest: Stack@()
# Executing instruction: ICALL at line: 25 with following arguments:
# Executing instruction: ILABEL at line: 3 with following arguments:
# Executing instruction: ICREATEFRAME at line: 4 with following arguments:
# Executing instruction: IPUSHFRAME at line: 5 with following arguments:
# Executing instruction: IDEFVAR at line: 6 with following arguments:
# Dest: LF@dj
# Executing instruction: IPOPS at line: 7 with following arguments:
# Arg1: Stack@=10(int)
# Dest: LF@dj()
# Executing instruction: IPUSHS at line: 8 with following arguments:
# Arg1: Const@=0(int)
# Dest: Stack@()
# Executing instruction: IPUSHS at line: 9 with following arguments:
# Arg1: Const@=99(int)
# Dest: Stack@()
# Executing instruction: IPOPS at line: 10 with following arguments:
# Arg1: Stack@=99(int)
# Dest: LF@dj=10(int)
# Executing instruction: ICLEARS at line: 11 with following arguments:
# Executing instruction: IPOPFRAME at line: 12 with following arguments:
# Executing instruction: IRETURN at line: 13 with following arguments:
# Executing instruction: IDEFVAR at line: 26 with following arguments:
# Dest: LF@&&function_return_0
# Error at line: 27
# Operand stack is empty
# 
# EXPECTED INTERPRETER STDOUT:

#  10


# CURRENT INTERPRETER STDOUT:



# INTERPRETER STDIN: 
# 
#
# EXPECTED COMPILER EXIT CODE: 0
# CURRENT COMPILER EXIT CODE: 0
# EXPECTED INTERPRETER EXIT CODE: 0
# CURRENT INTERPRETER EXIT CODE: 56
# PRICE: ---
# 
#   1: ' Try to modify an argument passed by the value
#   2: 
#   3: declare function HJHKHJK(hjhjhj as integer) as integer
#   4: 
#   5: function HJHKHJK(dj as integer) as integer
#   6: 	dj = 99
#   7: end function
#   8: 
#   9: 
#  10: 
#  11: SCOPE
#  12: 
#  13: 	dim a as integer
#  14: 	a = 10
#  15: 
#  16: 	dim b as integer
#  17: 	b = HJHKHJK(a)
#  18: 
#  19: 	print a;
#  20: 
#  21: END SCOPE

########################################

.IFJcode17                                                                      #     1/36
JUMP &&&scope                                                                   #     2/36
LABEL &func&hjhkhjk                                                             #     3/36
CREATEFRAME                                                                     #     4/36
PUSHFRAME                                                                       #     5/36
DEFVAR LF@dj                                                                    #     6/36
POPS LF@dj                                                                      #     7/36
PUSHS int@0                                                                     #     8/36
PUSHS int@99                                                                    #     9/36
POPS LF@dj                                                                      #    10/36
CLEARS                                                                          #    11/36
POPFRAME                                                                        #    12/36
RETURN                                                                          #    13/36
LABEL &&&scope                                                                  #    14/36
CREATEFRAME                                                                     #    15/36
PUSHFRAME                                                                       #    16/36
DEFVAR LF@a                                                                     #    17/36
MOVE LF@a int@0                                                                 #    18/36
PUSHS int@10                                                                    #    19/36
POPS LF@a                                                                       #    20/36
CLEARS                                                                          #    21/36
DEFVAR LF@b                                                                     #    22/36
MOVE LF@b int@0                                                                 #    23/36
PUSHS LF@a                                                                      #    24/36
CALL &func&hjhkhjk                                                              #    25/36
DEFVAR LF@&&function_return_0                                                   #    26/36
POPS LF@&&function_return_0                                                     #    27/36
PUSHS LF@&&function_return_0                                                    #    28/36
POPS LF@b                                                                       #    29/36
CLEARS                                                                          #    30/36
PUSHS LF@a                                                                      #    31/36
CREATEFRAME                                                                     #    32/36
DEFVAR TF@expr                                                                  #    33/36
POPS TF@expr                                                                    #    34/36
WRITE TF@expr                                                                   #    35/36
CLEARS                                                                          #    36/36